{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Logistic Regression (breast cancer)","provenance":[{"file_id":"1EBtaT0q_yHlfP8JrUdUcEKwD7J48_5Ya","timestamp":1626593865384}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Q8X8xDwS6vgS"},"source":["# Logistic Regression (breast cancer)"]},{"cell_type":"markdown","metadata":{"id":"PEGG4I6n60cM"},"source":["## Importing the libraries"]},{"cell_type":"code","metadata":{"id":"YuieDc7cf4Wp"},"source":["import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Aa536pRY7Eq5"},"source":["## Importing the dataset"]},{"cell_type":"code","metadata":{"id":"Hcmt5VTlhBDN"},"source":["#https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Original%29\n","dataset = pd.read_csv('breast_cancer.csv')\n","X = dataset.iloc[:, 1:-1].values #[selecting all the rows, selecting all the columns execpt the last one starting from column of index 1]\n","y = dataset.iloc[:, -1].values #[selecting all the rows, and taking only the last column]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0AnzJQCj7TLO"},"source":["## Splitting the dataset into the Training set and Test set"]},{"cell_type":"code","metadata":{"id":"b1fAGKQPjeuU"},"source":["#with scikit learn library\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pS1Q-n_A7iZ_"},"source":["## Training the Logistic Regression model on the Training set"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SDM4_OXDk5Bu","executionInfo":{"status":"ok","timestamp":1626594571003,"user_tz":-480,"elapsed":352,"user":{"displayName":"Jason Tan","photoUrl":"","userId":"11767026946709302079"}},"outputId":"f7c629f7-2919-4e28-eede-86d8ca0a78c9"},"source":["from sklearn.linear_model import LogisticRegression\n","classifier = LogisticRegression(random_state = 0)\n","\n","#train it\n","classifier.fit(X_train, y_train)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"4cgD7EnB8Dnd"},"source":["## Predicting the Test set results"]},{"cell_type":"code","metadata":{"id":"TJdxBiaOl-1x"},"source":["y_pred = classifier.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"26CHkZbs8Tu5"},"source":["## Making the Confusion Matrix"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y8Z0kHp3moV-","executionInfo":{"status":"ok","timestamp":1626596946611,"user_tz":-480,"elapsed":354,"user":{"displayName":"Jason Tan","photoUrl":"","userId":"11767026946709302079"}},"outputId":"a793550d-4af9-471b-fa7c-e8d6b2f60777"},"source":["from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(y_test, y_pred)\n","print(cm) #printing a 2 by 2 array\n","\n","#Result:\n","#84% that the tumour is benign, 3% incorrect\n","#47% that the tunour is malignant, 3% incorrect"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[84  3]\n"," [ 3 47]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9eJjMD_VvFg_","executionInfo":{"status":"ok","timestamp":1626597046664,"user_tz":-480,"elapsed":349,"user":{"displayName":"Jason Tan","photoUrl":"","userId":"11767026946709302079"}},"outputId":"bb31da28-9561-4ce5-993f-9762ed3ca889"},"source":["(84+47)/(84+47+3+3) #the accuracy of the prediction"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9562043795620438"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"kMErnLnu8hmb"},"source":["## Computing the accuracy with k-Fold Cross Validation"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dVpoj58xu-XC","executionInfo":{"status":"ok","timestamp":1626597567771,"user_tz":-480,"elapsed":337,"user":{"displayName":"Jason Tan","photoUrl":"","userId":"11767026946709302079"}},"outputId":"58452f89-ebb4-4697-c040-4e4be76da9cf"},"source":["from sklearn.model_selection import cross_val_score\n","accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10 ) #10 is the default number\n","print(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100)) #to display in percentages\n","print(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100)) #to display in percentages\n","\n","#real accuracy: 96.70% + or - 1.97%"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 96.70 %\n","Standard Deviation: 1.97 %\n"],"name":"stdout"}]}]}